# {{{ default stuff
[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion
use_color=true
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		# PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
		PS1='\W '
	fi

	alias ls='ls -lh --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias more=less
xhost +local:root > /dev/null 2>&1

complete -cf sudo

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize
shopt -s expand_aliases
# export QT_SELECT=4
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# better yaourt colors
export YAOURT_COLORS="nb=1:pkg=1:ver=1;32:lver=1;45:installed=1;42:grp=1;34:od=1;41;5:votes=1;44:dsc=0:other=1;35"

# }}}
# user  added
# PATH and system variables {{{
export PATH="$PATH:~/bin"
# set default text editor for command line tools like ranger
export EDITOR=nvim
export SYSTEMD_EDITOR=nvim
# export TERM=kitty
set -o vi
# add cd if onlt path entered
shopt -s autocd
# Save multi-line commands as one command
shopt -s cmdhist
# Correct spelling errors during tab completion
shopt -s dirspell 2> /dev/null
# extends regex for commands like: mv !(notthisfile) dirTo
shopt -s extglob
# }}}
# setup fasd {{{
eval "$(fasd --init auto)"
# }}}
# fzf setup {{{
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# select files with fzf and open files with default program or nvim
o() {
  local out file key
  out=$(fzf --query="$1" --exit-0 --expect=ctrl-e)
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-e ] && ${EDITOR:-nvim} "$file" || open "$file"
  fi
}
# }}}
# fasd setup {{{
# Enter with fasd directory and print its contents
unalias z
z()
{
 local dir
 dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
 l
}
fdc(){
    mkdir $2
    fd $1 -exec cp '{}' $2 \;
}
# find and copy file to fzf directory
fdz(){
    local outD
    outD="$(fasd -Rdl "$2" | fzf -1 -0 --no-sort +m)" || return 1
    fd $1 -exec cp '{}' "$outD" \;
}
# }}}
# {{{ enhancd
source /mnt/WD/github/enhancd/init.sh
# }}}
# man pages in short: tldr command {{{
complete -W "$(tldr 2>/dev/null --list)" tldr
# }}}
# generate gitignore files from command line {{{
function gi() { curl -L -s https://www.gitignore.io/api/$@ ;}
# }}}
# History setup {{{
export HISTSIZE=-1
export HISTFILESIZE=-1
# PROMPT_COMMAND="$PROMPT_COMMAND; history -a"
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE=?:??
shopt -s histappend
# attempt to save all lines of a multiple-line command in the same history entry
shopt -s cmdhist
# save multi-line commands to the history with embedded newlines
shopt -s lithist
# }}}
# enable job control {{{
set -m
# }}}
# ranger options {{{
export RANGER_LOAD_DEFAULT_RC=FALSE
# }}}
# nvr for nested neovim {{{
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  export VISUAL="nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
else
  export VISUAL="nvim"
fi
alias v="$VISUAL"
alias vim="$VISUAL"
alias nvim="$VISUAL"
# }}}
# Set the title of the terminal to dir {{{
case "$TERM" in
xterm*|kitty*|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'
    # Show the currently running command in the terminal title:
    # http://www.davidpashley.com/articles/xterm-titles-with-bash.html
    show_command_in_title_bar()
    {
	case "$BASH_COMMAND" in
	    *\033]0*)
		# The command is trying to set the title bar as well;
		# this is most likely the execution of $PROMPT_COMMAND.
		# In any case nested escapes confuse the terminal, so don't
		# output them.
		# ;;
	    # *)
		# echo -ne "\033]0;${USER}@${HOSTNAME}: ${BASH_COMMAND}\007"
		# ;;
	esac
    }
     trap show_command_in_title_bar DEBUG
     ;;
*)
    ;;
esac
# }}}
